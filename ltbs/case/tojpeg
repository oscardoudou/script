#! /bin/bash 
# task 4-2
# use different utility convert to pnm first, then convert pnm ot jpeg
# the usage of case is to select the correct conversion utility based on file extension
# ltbs on page 358 parenthesis is separated from pattern in a new line, is not acceptable.
# case expression in 
#   pattern1)
#   statements ;;
#   *)
#   statements ;;
# esac
# https://filesamples.com/categories/image
# the reason we use function in prev version is 
# 1. we want to encapsulate the detail logic, so that script is more readable,
# 2. use function which accept argument help debug
# why we are not using function when adopt eval
# 0. although function accept argument makes it easier to debug, but that is actually sacrificing
#    convention, which should place the default value upfront at the starat of script not hide deep in the function
# 1. if you are doing eval procimage and inside function procimage{} have all pipe in variable, this wont work,
#    except you have eval in function as well, but that wont let peoople know why you could have pipe in var, better explicity use it in main for loop
# 2. previously we are executing same pipeline, only argument of each command in pipeline differs, 
#    now entire step would differ because the way we use it, and what each step should be has to be decided when doing getopt, as we are use default value in each step
#    so default value should to declared before getopts, since default value declaration has to be upfront, 
#    there isn't any more reason to still having function, as it can't benifit us by easy debugging
# why we dont remove temp file in prev version
# that would be really long pipeline inside switch, now with help of eval, we dont have to pipe directly inside switch, we can just wait every piece contruction done and do it in one go
usage="Usage: $0 [-s size] [-w width] [-c \"color\"] imagefile ..."

# no default size to stop address scale regardless in prev version
width=5
color="-color red"
standarise="| pnmtojpeg -quiet"
while getopts ":s:w:c:" opt; do 
    case $opt in 
        s) 
            size=$OPTARG 
            scale="| pnmscale -xysize $size $size";;
        w)
            width=$OPTARG
            border="| pnmmargin $color $width" ;;
        c)  
            color="-color $OPTARG"
            border="| pnmmargin $color $width" ;;
        \?) 
            echo $usage
            exit 1;;
    esac
done

shift $((OPTIND-1))

# $* is single string while $@ is "$1" "$2" ... "$N", 
# -z "$@" would complain too many arguments if you pass multiple file, 
# even if you pass only * or *.*, when command ./tojpeg -s 360 -w 10 -c purple *.* doing path expansion,
# they usualy expands to multiple arguemnt, in *.* case, it expands to all files with extension
# after path expansino, it search for command in this case, tojpeg is neither function builtin nor command in path
if [ -z "$*" ]; then 
    echo $usage
fi

for imagefile in "$@"; do
    # select correct conversion utility based on file extension, use miscellaneous utility convert graphic file to common ppm file
    case $imagefile in 
        *.jpeg|*.jpg)
            convert="jpegtopnm -quiet" ;;
        *.tga)
            convert="tgatoppm" ;;
        *.xpm)
            convert="xpmtoppm" ;;
        *.pcx)
            convert="pcxtoppm" ;;
        *.tiff|*.tif)
            convert="tifftopnm" ;;
        *.gif)
            convert="giftopnm" ;;
        *)
            echo "$filename has unknown graphic file extension $extension";;
    esac
    outfile=${imagefile%.*}.new.jpeg
    eval $convert $imagefile $scale $border $standarise > $outfile
done
